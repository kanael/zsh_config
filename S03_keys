# make backward-delete-char work properly
autoload -U modify-current-argument


################ KEY BINDING #####################
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line
bindkey '\e[3~' delete-char
bindkey '\e[1;5D' backward-word
bindkey '\e[1;5C' forward-word

# you have to make iTerm send this sequence if you want to use it....
bindkey '\e?' backward-delete-word

bindkey '^G' backward-kill-line
bindkey '^z' undo

eval "insert-cdup () { LBUFFER+='cd ..'; zle accept-line }"
zle -N insert-cdup
bindkey '\e[1;6A' insert-cdup

eval "insert-cycledleft () { zle push-line; LBUFFER='pushd -q +1'; zle accept-line }"
zle -N insert-cycledleft
bindkey "\e[1;6D" insert-cycledleft
eval "insert-cycledright () { zle push-line; LBUFFER='pushd -q -0'; zle accept-line }"
zle -N insert-cycledright
bindkey "\e[1;6C" insert-cycledright

eval "insert-popd () { LBUFFER+='popd'; zle accept-line }"
zle -N insert-popd
bindkey "^P" insert-popd

# word quoting
function _quote_word()
{
    modify-current-argument '\"${(q)ARG}\"'
}

zle -N _quote_word

function _unquote_word()
{
  modify-current-argument '${(Q)ARG}'
}
zle -N _unquote_word

bindkey "^Xq" _quote_word
bindkey "^XQ" _unquote_word

# Function keys

eval "zle-no-op() {}"
zle -N zle-no-op

#F1
bindkey '^[OP' zle-no-op
#F2
bindkey '^[OQ' zle-no-op
#F3
eval "f3() {zle push-line;LBUFFER+='f3';zle accept-line}"
zle -N f3
bindkey '^[OR' f3
#F4
eval "f4() {zle push-line;LBUFFER+='f4';zle accept-line}"
zle -N f4
bindkey '^[OS' f4
#F5
eval "f5() {zle push-line;LBUFFER+='f5';zle accept-line}"
zle -N f5
bindkey '^[[15~' f5
#F6
eval "f6() {zle push-line;LBUFFER+='f6';zle accept-line}"
zle -N f6
bindkey '^[[17~' f6
#F7
eval "f7() {zle push-line;LBUFFER+='f7';zle accept-line}"
zle -N f7
bindkey '^[[18~' f7
#F8
eval "f8() {zle push-line;LBUFFER+='f8';zle accept-line}"
zle -N f8
bindkey '^[[19~' f8
#F9
eval "f9() {zle push-line;LBUFFER+='zsh_build';zle accept-line}"
zle -N f9
bindkey '^[[20~' f9
#F10
eval "f10() {zle push-line;LBUFFER+='f10';zle accept-line}"
zle -N f10
bindkey '^[[21~' f10
#F11
eval "f11() {zle push-line;LBUFFER+='f11';zle accept-line}"
zle -N f11
bindkey '^[[23~' f11
#F12
eval "f12() {zle push-line;LBUFFER+='f12';zle accept-line}"
zle -N f12
bindkey '^[[24~' f12

